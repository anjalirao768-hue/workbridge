#!/usr/bin/env python3

import requests
import json
import sys
import time
from datetime import datetime

class OTPDatabaseTester:
    def __init__(self, base_url="http://localhost:3000"):
        self.base_url = base_url
        self.session = requests.Session()
        self.tests_run = 0
        self.tests_passed = 0
        self.test_results = []

    def log_test(self, name, success, details=""):
        """Log test result"""
        self.tests_run += 1
        if success:
            self.tests_passed += 1
            status = "‚úÖ PASS"
        else:
            status = "‚ùå FAIL"
        
        result = f"{status} - {name}"
        if details:
            result += f" | {details}"
        
        print(result)
        self.test_results.append({
            'name': name,
            'success': success,
            'details': details
        })
        return success

    def test_send_otp_database_storage(self, email):
        """Test OTP generation and database storage"""
        print(f"\nüîç Testing OTP Database Storage for {email}...")
        
        try:
            url = f"{self.base_url}/api/auth/send-otp"
            data = {"email": email}
            
            response = self.session.post(url, json=data, headers={'Content-Type': 'application/json'})
            
            if response.status_code == 200:
                response_data = response.json()
                if response_data.get('success'):
                    return self.log_test(
                        "OTP Database Storage", 
                        True, 
                        f"OTP stored for {email}, userId: {response_data.get('data', {}).get('userId')}"
                    )
                else:
                    return self.log_test(
                        "OTP Database Storage", 
                        False, 
                        f"API returned success=false: {response_data.get('error')}"
                    )
            else:
                return self.log_test(
                    "OTP Database Storage", 
                    False, 
                    f"HTTP {response.status_code}: {response.text[:200]}"
                )
                
        except Exception as e:
            return self.log_test("OTP Database Storage", False, f"Exception: {str(e)}")

    def test_multiple_otp_requests(self, email):
        """Test multiple OTP requests for same email (should replace previous OTP)"""
        print(f"\nüîç Testing Multiple OTP Requests for {email}...")
        
        success_count = 0
        
        # Send first OTP
        try:
            url = f"{self.base_url}/api/auth/send-otp"
            data = {"email": email}
            
            response1 = self.session.post(url, json=data, headers={'Content-Type': 'application/json'})
            if response1.status_code == 200 and response1.json().get('success'):
                success_count += 1
                
            # Wait a moment
            time.sleep(1)
            
            # Send second OTP (should replace first)
            response2 = self.session.post(url, json=data, headers={'Content-Type': 'application/json'})
            if response2.status_code == 200 and response2.json().get('success'):
                success_count += 1
                
            # Send third OTP (should replace second)
            response3 = self.session.post(url, json=data, headers={'Content-Type': 'application/json'})
            if response3.status_code == 200 and response3.json().get('success'):
                success_count += 1
                
            if success_count == 3:
                return self.log_test(
                    "Multiple OTP Requests", 
                    True, 
                    f"Successfully sent 3 sequential OTPs (latest should replace previous)"
                )
            else:
                return self.log_test(
                    "Multiple OTP Requests", 
                    False, 
                    f"Only {success_count}/3 OTP requests succeeded"
                )
                
        except Exception as e:
            return self.log_test("Multiple OTP Requests", False, f"Exception: {str(e)}")

    def test_otp_verification_with_invalid_otp(self, email):
        """Test OTP verification with invalid OTP (should track attempts)"""
        print(f"\nüîç Testing Invalid OTP Verification for {email}...")
        
        try:
            # First send a valid OTP
            send_url = f"{self.base_url}/api/auth/send-otp"
            send_data = {"email": email}
            send_response = self.session.post(send_url, json=send_data, headers={'Content-Type': 'application/json'})
            
            if send_response.status_code != 200 or not send_response.json().get('success'):
                return self.log_test("Invalid OTP Verification", False, "Failed to send OTP first")
            
            # Now try invalid OTP
            verify_url = f"{self.base_url}/api/auth/verify-otp"
            verify_data = {
                "email": email,
                "otp": "000000",  # Invalid OTP
                "role": "freelancer",
                "isLogin": False
            }
            
            response = self.session.post(verify_url, json=verify_data, headers={'Content-Type': 'application/json'})
            
            if response.status_code == 400:
                response_data = response.json()
                if not response_data.get('success') and 'Invalid or expired OTP' in response_data.get('error', ''):
                    remaining_attempts = response_data.get('remainingAttempts', 0)
                    return self.log_test(
                        "Invalid OTP Verification", 
                        True, 
                        f"Correctly rejected invalid OTP, remaining attempts: {remaining_attempts}"
                    )
                else:
                    return self.log_test(
                        "Invalid OTP Verification", 
                        False, 
                        f"Unexpected error message: {response_data.get('error')}"
                    )
            else:
                return self.log_test(
                    "Invalid OTP Verification", 
                    False, 
                    f"Expected 400 status, got {response.status_code}"
                )
                
        except Exception as e:
            return self.log_test("Invalid OTP Verification", False, f"Exception: {str(e)}")

    def test_otp_attempt_limit(self, email):
        """Test OTP attempt limit (3 attempts max)"""
        print(f"\nüîç Testing OTP Attempt Limit for {email}...")
        
        try:
            # Send OTP first
            send_url = f"{self.base_url}/api/auth/send-otp"
            send_data = {"email": email}
            send_response = self.session.post(send_url, json=send_data, headers={'Content-Type': 'application/json'})
            
            if send_response.status_code != 200 or not send_response.json().get('success'):
                return self.log_test("OTP Attempt Limit", False, "Failed to send OTP first")
            
            verify_url = f"{self.base_url}/api/auth/verify-otp"
            
            # Try 3 invalid attempts
            for attempt in range(1, 4):
                verify_data = {
                    "email": email,
                    "otp": f"00000{attempt}",  # Invalid OTP
                    "role": "freelancer",
                    "isLogin": False
                }
                
                response = self.session.post(verify_url, json=verify_data, headers={'Content-Type': 'application/json'})
                
                if response.status_code == 400:
                    response_data = response.json()
                    remaining = response_data.get('remainingAttempts', 0)
                    print(f"   Attempt {attempt}: Remaining attempts = {remaining}")
                else:
                    return self.log_test("OTP Attempt Limit", False, f"Attempt {attempt} failed with status {response.status_code}")
            
            # 4th attempt should fail completely (no remaining attempts)
            verify_data = {
                "email": email,
                "otp": "000004",
                "role": "freelancer", 
                "isLogin": False
            }
            
            response = self.session.post(verify_url, json=verify_data, headers={'Content-Type': 'application/json'})
            
            if response.status_code == 400:
                response_data = response.json()
                remaining = response_data.get('remainingAttempts', 0)
                if remaining == 0:
                    return self.log_test(
                        "OTP Attempt Limit", 
                        True, 
                        "Correctly enforced 3-attempt limit"
                    )
                else:
                    return self.log_test(
                        "OTP Attempt Limit", 
                        False, 
                        f"Expected 0 remaining attempts, got {remaining}"
                    )
            else:
                return self.log_test("OTP Attempt Limit", False, f"4th attempt got status {response.status_code}")
                
        except Exception as e:
            return self.log_test("OTP Attempt Limit", False, f"Exception: {str(e)}")

    def test_concurrent_users_different_otps(self):
        """Test concurrent OTP requests for different users"""
        print(f"\nüîç Testing Concurrent Users with Different OTPs...")
        
        emails = [
            "user1@workbridge.test",
            "user2@workbridge.test", 
            "user3@workbridge.test"
        ]
        
        success_count = 0
        
        try:
            # Send OTPs for all users simultaneously
            for email in emails:
                url = f"{self.base_url}/api/auth/send-otp"
                data = {"email": email}
                
                response = self.session.post(url, json=data, headers={'Content-Type': 'application/json'})
                
                if response.status_code == 200 and response.json().get('success'):
                    success_count += 1
                    print(f"   ‚úì OTP sent for {email}")
                else:
                    print(f"   ‚úó Failed to send OTP for {email}")
            
            if success_count == len(emails):
                return self.log_test(
                    "Concurrent Users Different OTPs", 
                    True, 
                    f"Successfully sent OTPs for {success_count} different users"
                )
            else:
                return self.log_test(
                    "Concurrent Users Different OTPs", 
                    False, 
                    f"Only {success_count}/{len(emails)} OTPs sent successfully"
                )
                
        except Exception as e:
            return self.log_test("Concurrent Users Different OTPs", False, f"Exception: {str(e)}")

    def test_otp_cleanup_functionality(self, email):
        """Test OTP cleanup (expired OTPs should be removed)"""
        print(f"\nüîç Testing OTP Cleanup Functionality for {email}...")
        
        try:
            # Send OTP
            send_url = f"{self.base_url}/api/auth/send-otp"
            send_data = {"email": email}
            
            response = self.session.post(send_url, json=send_data, headers={'Content-Type': 'application/json'})
            
            if response.status_code == 200 and response.json().get('success'):
                # The cleanup happens automatically when storing new OTP
                # We can verify by sending another OTP (which should trigger cleanup)
                time.sleep(1)
                
                response2 = self.session.post(send_url, json=send_data, headers={'Content-Type': 'application/json'})
                
                if response2.status_code == 200 and response2.json().get('success'):
                    return self.log_test(
                        "OTP Cleanup Functionality", 
                        True, 
                        "Cleanup triggered successfully during OTP storage"
                    )
                else:
                    return self.log_test(
                        "OTP Cleanup Functionality", 
                        False, 
                        "Second OTP request failed"
                    )
            else:
                return self.log_test("OTP Cleanup Functionality", False, "Initial OTP request failed")
                
        except Exception as e:
            return self.log_test("OTP Cleanup Functionality", False, f"Exception: {str(e)}")

    def test_specific_user_anjalirao768(self):
        """Test specifically for anjalirao768@gmail.com (the user mentioned in the bug report)"""
        print(f"\nüîç Testing Specific User: anjalirao768@gmail.com...")
        
        email = "anjalirao768@gmail.com"
        
        try:
            # Send OTP
            send_url = f"{self.base_url}/api/auth/send-otp"
            send_data = {"email": email}
            
            response = self.session.post(send_url, json=send_data, headers={'Content-Type': 'application/json'})
            
            if response.status_code == 200:
                response_data = response.json()
                if response_data.get('success'):
                    return self.log_test(
                        "Specific User anjalirao768@gmail.com", 
                        True, 
                        f"OTP successfully sent and stored in database for anjalirao768@gmail.com"
                    )
                else:
                    return self.log_test(
                        "Specific User anjalirao768@gmail.com", 
                        False, 
                        f"API returned success=false: {response_data.get('error')}"
                    )
            else:
                return self.log_test(
                    "Specific User anjalirao768@gmail.com", 
                    False, 
                    f"HTTP {response.status_code}: {response.text[:200]}"
                )
                
        except Exception as e:
            return self.log_test("Specific User anjalirao768@gmail.com", False, f"Exception: {str(e)}")

    def test_database_persistence_across_requests(self, email):
        """Test that OTPs persist in database across different API requests"""
        print(f"\nüîç Testing Database Persistence Across Requests for {email}...")
        
        try:
            # Send OTP with one session
            session1 = requests.Session()
            send_url = f"{self.base_url}/api/auth/send-otp"
            send_data = {"email": email}
            
            response1 = session1.post(send_url, json=send_data, headers={'Content-Type': 'application/json'})
            
            if response1.status_code != 200 or not response1.json().get('success'):
                return self.log_test("Database Persistence", False, "Failed to send OTP")
            
            # Try to verify with a different session (simulating serverless function isolation)
            session2 = requests.Session()
            verify_url = f"{self.base_url}/api/auth/verify-otp"
            verify_data = {
                "email": email,
                "otp": "000000",  # Invalid OTP, but should still find the record
                "role": "freelancer",
                "isLogin": False
            }
            
            response2 = session2.post(verify_url, json=verify_data, headers={'Content-Type': 'application/json'})
            
            # Should get 400 with "Invalid or expired OTP" (meaning it found the OTP record but OTP was wrong)
            if response2.status_code == 400:
                response_data = response2.json()
                if 'Invalid or expired OTP' in response_data.get('error', ''):
                    return self.log_test(
                        "Database Persistence", 
                        True, 
                        "OTP persisted across different sessions (database storage working)"
                    )
                else:
                    return self.log_test(
                        "Database Persistence", 
                        False, 
                        f"Unexpected error: {response_data.get('error')}"
                    )
            else:
                return self.log_test(
                    "Database Persistence", 
                    False, 
                    f"Expected 400 status, got {response2.status_code}"
                )
                
        except Exception as e:
            return self.log_test("Database Persistence", False, f"Exception: {str(e)}")

def main():
    print("üöÄ Starting Database-Backed OTP System Testing...")
    print("=" * 70)
    print("Focus: Testing the new database-backed OTP storage system")
    print("Architecture: Supabase database storage (replacing in-memory Map)")
    print("=" * 70)
    
    tester = OTPDatabaseTester()
    
    # Test emails
    test_emails = [
        "testuser1@workbridge.test",
        "testuser2@workbridge.test", 
        "anjalirao768@gmail.com"  # Specific user from bug report
    ]
    
    print(f"\n{'='*50}")
    print("PHASE 1: DATABASE-BACKED OTP STORAGE TESTING")
    print(f"{'='*50}")
    
    # Test 1: Basic OTP database storage
    for email in test_emails[:2]:  # Test with first 2 emails
        tester.test_send_otp_database_storage(email)
    
    # Test 2: Multiple OTP requests (should replace previous)
    tester.test_multiple_otp_requests(test_emails[0])
    
    # Test 3: Database persistence across requests
    tester.test_database_persistence_across_requests(test_emails[1])
    
    print(f"\n{'='*50}")
    print("PHASE 2: OTP LIFECYCLE TESTING")
    print(f"{'='*50}")
    
    # Test 4: Invalid OTP verification (attempt tracking)
    tester.test_otp_verification_with_invalid_otp(test_emails[0])
    
    # Test 5: OTP attempt limit enforcement
    tester.test_otp_attempt_limit(test_emails[1])
    
    # Test 6: OTP cleanup functionality
    tester.test_otp_cleanup_functionality(test_emails[0])
    
    print(f"\n{'='*50}")
    print("PHASE 3: SPECIFIC BUG FIX VERIFICATION")
    print(f"{'='*50}")
    
    # Test 7: Specific user from bug report
    tester.test_specific_user_anjalirao768()
    
    print(f"\n{'='*50}")
    print("PHASE 4: CONCURRENT USERS & SCALABILITY")
    print(f"{'='*50}")
    
    # Test 8: Concurrent users with different OTPs
    tester.test_concurrent_users_different_otps()
    
    # Print detailed summary
    print(f"\n{'='*70}")
    print("üìä DATABASE-BACKED OTP SYSTEM TESTING SUMMARY")
    print(f"{'='*70}")
    print(f"   Tests run: {tester.tests_run}")
    print(f"   Tests passed: {tester.tests_passed}")
    print(f"   Success rate: {(tester.tests_passed/tester.tests_run)*100:.1f}%")
    
    print(f"\nüéØ KEY FUNCTIONALITY TESTED:")
    print(f"   ‚úì Database-backed OTP storage (Supabase otp_codes table)")
    print(f"   ‚úì OTP persistence across serverless function instances")
    print(f"   ‚úì OTP lifecycle (generation ‚Üí storage ‚Üí verification ‚Üí cleanup)")
    print(f"   ‚úì Attempt limit enforcement (3 attempts max)")
    print(f"   ‚úì Multiple OTP requests (latest replaces previous)")
    print(f"   ‚úì Concurrent users with isolated OTP records")
    print(f"   ‚úì Specific bug fix for anjalirao768@gmail.com")
    print(f"   ‚úì Database cleanup of expired OTPs")
    
    print(f"\nüîß ARCHITECTURE VERIFICATION:")
    print(f"   ‚úì Previous: In-memory Map storage (failed in serverless)")
    print(f"   ‚úì New: Supabase database-backed persistent storage")
    print(f"   ‚úì Expected: OTPs persist across serverless function instances")
    
    if tester.tests_passed == tester.tests_run:
        print(f"\nüéâ All tests passed! Database-backed OTP system is working correctly.")
        print(f"‚úÖ The 'Invalid or expired OTP' issue should be resolved.")
        return 0
    else:
        failed_tests = tester.tests_run - tester.tests_passed
        print(f"\n‚ö†Ô∏è  {failed_tests} test(s) failed. Review the issues above.")
        
        # Show failed tests
        print(f"\n‚ùå FAILED TESTS:")
        for result in tester.test_results:
            if not result['success']:
                print(f"   - {result['name']}: {result['details']}")
        
        return 1

if __name__ == "__main__":
    sys.exit(main())